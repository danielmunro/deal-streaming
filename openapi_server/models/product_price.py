# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class ProductPrice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sku=None, price=None, retailer=None, url=None):  # noqa: E501
        """ProductPrice - a model defined in OpenAPI

        :param sku: The sku of this ProductPrice.  # noqa: E501
        :type sku: str
        :param price: The price of this ProductPrice.  # noqa: E501
        :type price: float
        :param retailer: The retailer of this ProductPrice.  # noqa: E501
        :type retailer: str
        :param url: The url of this ProductPrice.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'sku': str,
            'price': float,
            'retailer': str,
            'url': str
        }

        self.attribute_map = {
            'sku': 'sku',
            'price': 'price',
            'retailer': 'retailer',
            'url': 'url'
        }

        self._sku = sku
        self._price = price
        self._retailer = retailer
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'ProductPrice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProductPrice of this ProductPrice.  # noqa: E501
        :rtype: ProductPrice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sku(self):
        """Gets the sku of this ProductPrice.


        :return: The sku of this ProductPrice.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this ProductPrice.


        :param sku: The sku of this ProductPrice.
        :type sku: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")  # noqa: E501

        self._sku = sku

    @property
    def price(self):
        """Gets the price of this ProductPrice.


        :return: The price of this ProductPrice.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductPrice.


        :param price: The price of this ProductPrice.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def retailer(self):
        """Gets the retailer of this ProductPrice.


        :return: The retailer of this ProductPrice.
        :rtype: str
        """
        return self._retailer

    @retailer.setter
    def retailer(self, retailer):
        """Sets the retailer of this ProductPrice.


        :param retailer: The retailer of this ProductPrice.
        :type retailer: str
        """
        if retailer is None:
            raise ValueError("Invalid value for `retailer`, must not be `None`")  # noqa: E501

        self._retailer = retailer

    @property
    def url(self):
        """Gets the url of this ProductPrice.


        :return: The url of this ProductPrice.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ProductPrice.


        :param url: The url of this ProductPrice.
        :type url: str
        """

        self._url = url
